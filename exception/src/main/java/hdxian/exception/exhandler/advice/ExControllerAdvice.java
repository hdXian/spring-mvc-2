package hdxian.exception.exhandler.advice;

import hdxian.exception.customexception.UserException;
import hdxian.exception.exhandler.ApiExceptionV2Controller;
import hdxian.exception.exhandler.ErrorResult;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@Slf4j
//@RestControllerAdvice(assignableTypes = ApiExceptionV2Controller.class) // it's able to assign scope of Advice
@RestControllerAdvice(basePackages = "hdxian.exception.exhandler") // it's able to assign scope of Advice
public class ExControllerAdvice {

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(IllegalArgumentException.class)
    public ErrorResult illegalExHandle(IllegalArgumentException ex) {
        log.error("[ExControllerAdvice] ex", ex);
        return new ErrorResult("BAD", ex.getMessage() + ": generated by @ExceptionHandler");
    }

    @ExceptionHandler(UserException.class)
    public ResponseEntity<ErrorResult> userExHandle(UserException ex) {
        log.error("[ExControllerAdvice] ex", ex);
        ErrorResult result = new ErrorResult("userEx", ex.getMessage() + ": generated by @ExceptionHandler");
        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);
    }

    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    @ExceptionHandler // able to omit Exception type (apply method parameter type)
    public ErrorResult exHandle(Exception ex) {
        log.error("[ExControllerAdvice] ex", ex);
        return new ErrorResult("commonEx", ex.getMessage() + ": generated by @ExceptionHandler");
    }

}
