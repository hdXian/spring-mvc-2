package hdxian.exception.exhandler;

import hdxian.exception.customexception.UserException;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@Slf4j
@RestController
public class ApiExceptionV2Handler {

    // to test, send requests what declared in getMember()

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(IllegalArgumentException.class)
    public ErrorResult illegalExHandle(IllegalArgumentException ex) {
        log.error("[@exceptionHandler] ex", ex);
        return new ErrorResult("BAD", ex.getMessage() + ": generated by @ExceptionHandler");
    }

    @ExceptionHandler(UserException.class)
    public ResponseEntity<ErrorResult> userExHandle(UserException ex) {
        log.error("[@exceptionHandler] ex", ex);
        ErrorResult result = new ErrorResult("userEx", ex.getMessage() + ": generated by @ExceptionHandler");
        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);
    }

    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    @ExceptionHandler // able to omit Exception type (apply method parameter type)
    public ErrorResult exHandle(Exception ex) {
        log.error("[@exceptionHandler] ex", ex);
        return new ErrorResult("commonEx", ex.getMessage() + ": generated by @ExceptionHandler");
    }


    @GetMapping("/api2/members/{id}")
    public MemberDto getMember(@PathVariable("id") String id) {

        if (id.equals("ex")) {
            throw new RuntimeException("invalid Member");
        }
        if (id.equals("bad")) {
            throw new IllegalArgumentException("잘못된 memberId 입력");
        }
        if (id.equals("user-ex")) {
            throw new UserException("사용자 오류");
        }

        return new MemberDto(id, "hello " + id);
    }

    @Data
    @AllArgsConstructor
    static class MemberDto {
        private String memberid;
        private String name;
    }
}
