package hdxian.exception.resolver;

import com.fasterxml.jackson.databind.ObjectMapper;
import hdxian.exception.customexception.UserException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.web.servlet.HandlerExceptionResolver;
import org.springframework.web.servlet.ModelAndView;

import java.io.IOException;
import java.util.HashMap;

@Slf4j
public class UserHandlerExceptionResolver implements HandlerExceptionResolver {

    // for mapping Map to JSON
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {

        try {
             // handle when UserException
            if (ex instanceof UserException) {

                log.info("[UserHandlerExceptionResolver] resolving [{}] (will respond 400)", ex.getClass());

                // get Accept and set Status Code
                String acceptHeader = request.getHeader("accept");
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);

                // if Accept is application/json
                if (MediaType.APPLICATION_JSON_VALUE.equals(acceptHeader)) {

                    // generate error info (as HashMap)
                    HashMap<String, Object> errorResult = new HashMap<>();
                    errorResult.put("ex", ex.getClass());
                    errorResult.put("message", ex.getMessage());
                    errorResult.put("description", "generated by UserHandlerExceptionResolver");

                    // mapping HashMap -> String
                    String resultBody = objectMapper.writeValueAsString(errorResult);

                    // set Http Response
                    response.setContentType(MediaType.APPLICATION_JSON_VALUE); // application/json
                    response.setCharacterEncoding("utf-8");
                    response.getWriter().write(resultBody);

                    return new ModelAndView(); // no rendering
                }
                else { // if NOT json
                    return new ModelAndView("/error/400"); // render error page
                }

            }

            return null;

        } catch (IOException e) {
            log.info("[UserHandlerExceptionResolver] IOException occurs");
        }

        log.info("[UserHandlerExceptionResolver] failed to resolve [{}]", ex.getClass());
        return null;
    }

}
